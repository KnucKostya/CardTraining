import React from "react";
import { createRoot } from "react-dom/client";
import { Provider } from "react-redux";
import reportWebVitals from "./reportWebVitals";
import "./index.css";
import { RouterProvider } from "react-router-dom";
import { router } from "app/routes";
import { store } from "app/store";

const container = document.getElementById("root")!;
const root = createRoot(container);

root.render(
  <Provider store={store}>
    <RouterProvider router={router} />
  </Provider>
);

//–Ω–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏(–≤—ã–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª—è(—Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)

reportWebVitals();

// import ReactDOM from "react-dom/client";
// import { BrowserRouter, Route, Routes, useNavigate, useParams } from "react-router-dom";
// import React from "react";
//
// type UserType = {
//   id: number;
//   name: string;
//   avatar: string;
//   age: number;
//   address: string;
// };
//
// const users: UserType[] = [
//   {
//     id: 1,
//     name: "my Name",
//     age: 32,
//     avatar: "‚Äî‡∏Ö/·ê†.Ã´ .·êü\\‡∏Ö‚Äî",
//     address: "my Address",
//   },
//   {
//     id: 2,
//     name: "John",
//     age: 22,
//     avatar: ":)",
//     address: "California",
//   },
//   {
//     id: 3,
//     name: "Mike",
//     age: 18,
//     avatar: "^._.^",
//     address: "New York",
//   },
//   {
//     id: 4,
//     name: "Emma",
//     age: 38,
//     avatar: "/·ê†-Íûà-·êü\\",
//     address: "Washington",
//   },
// ];
//
// const StartPage = () => {
//   const navigate = useNavigate();
//   const friends = users.filter((u) => u.id !== 1);
//
//   const mappedFriends = friends.map((f, i) => {
//     const go = () => {
//       navigate("/friend/" + f.id);
//     };
//
//     return (
//       <div key={i} onClick={go} style={{ paddingLeft: 24, color: "blue", cursor: "pointer" }}>
//         {f.name}, {f.age}
//       </div>
//     );
//   });
//
//   return (
//     <div>
//       <h2>üôÇ My profile</h2>
//       <Profile userId={1} />
//       <hr />
//       <h2>üë™ Friends</h2>
//       {mappedFriends}
//     </div>
//   );
// };
// const Profile: React.FC<{ userId?: number }> = ({ userId }) => {
//   const { id } = useParams<{ id: string }>();
//   const user = users.find((u) => u.id === +(id || userId || 0));
//
//   return (
//     <div>
//       <div>
//         <b>avatar</b> {user?.avatar}
//       </div>
//       <div>
//         <div>
//           <b>name</b>: {user?.name}
//         </div>
//         <div>
//           <b>age</b>: {user?.age}
//         </div>
//         <div>
//           <b>address</b>: {user?.address}
//         </div>
//       </div>
//     </div>
//   );
// };
//
// export const Friends = () => {
//   return (
//     <Routes>
//       <Route path={"/"} element={<StartPage />} />
//       <Route path={"friend/:id"} element={<Profile />} />
//       <Route path={"*"} element={<div>‚ùå404 Page Not Found‚ùå</div>} />
//     </Routes>
//   );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//   <BrowserRouter>
//     <Friends />
//   </BrowserRouter>
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
// –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π.
// –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ –≤–∏–¥–∏–º ‚ùå404 Page Not Found‚ùå
// –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ –∫–ª–∏–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥—Ä—É–≥–µ.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞.
//
// –æ—Ç–≤–µ—Ç:      <Route path={"friend/:id"} element={<Profile />} />

// import React from "react";
// import ReactDOM from "react-dom/client";
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from "redux";
// import thunk, { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
//
// // Reducer
// const initState = {
//   work: 0,
//   donate: 0,
//   balance: 0,
// };
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case "CHANGE_VALUE":
//       return {
//         ...state,
//         ...action.payload,
//       };
//     default:
//       return state;
//   }
// };
//
// // Store
// const rootReducer = combineReducers({ app: appReducer });
//
// const store = createStore(rootReducer, applyMiddleware(thunk));
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// const changeValue = (payload: any) => ({ type: "CHANGE_VALUE", payload } as const);
// type ActionsType = ReturnType<typeof changeValue>;
//
// // Components
// export const Income = () => {
//   const work = useAppSelector((state) => state.app.work);
//   const donate = useAppSelector((state) => state.app.donate);
//   const balance = useAppSelector((state) => state.app.balance);
//
//   const dispatch = useAppDispatch();
//
//   return (
//     <div>
//       <div>
//         work:{" "}
//         <input
//           value={work}
//           type={"number"}
//           onChange={(e) => dispatch(changeValue({ work: +e.target.value }))}
//         />
//       </div>
//       <div>
//         donate:{" "}
//         <input
//           value={donate}
//           type={"number"}
//           onChange={(e) => dispatch(changeValue({ donate: +e.target.value }))}
//         />
//       </div>
//
//       <h1>üíµ balance: {balance}</h1>
//       <button
//         onClick={() => {
//           dispatch(changeValue({ balance: work + donate }));
//         }}
//       >
//         calculate balance
//       </button>
//     </div>
//   );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//   <Provider store={store}>
//     <Income />
//   </Provider>
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –≤—ã–≤–µ–ª–∞—Å—å —Å—É–º–º–∞ –¥–æ—Ö–æ–¥–∞ –≤ —Å—Ç—Ä–æ–∫–µ –±–∞–ª–∞–Ω—Å–∞
//
//–æ—Ç–≤–µ—Ç: dispatch(changeValue({ balance: work + donate }));

// import ReactDOM from "react-dom/client";
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from "redux";
// import thunk, { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import React, { useEffect } from "react";
// import axios from "axios";
//
// // Styles
// const table: React.CSSProperties = {
//   borderCollapse: "collapse",
//   width: "100%",
//   tableLayout: "fixed",
// };
//
// const th: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
//   background: "lightgray",
//   cursor: "pointer",
// };
//
// const td: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
// };
//
// // Types
// type UserType = {
//   id: string;
//   name: string;
//   age: number;
// };
//
// type UsersResponseType = {
//   items: UserType[];
//   totalCount: number;
// };
//
// type ParamsType = {
//   sortBy: string | null;
//   sortDirection: "asc" | "desc" | null;
// };
//
// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.ru/api/" });
//
// const api = {
//   getUsers(params?: ParamsType) {
//     return instance.get<UsersResponseType>("users", { params });
//   },
// };
//
// // Reducer
// const initState = {
//   users: [] as UserType[],
//   params: {
//     sortBy: null,
//     sortDirection: "asc",
//   } as ParamsType,
// };
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case "SET_USERS":
//       return { ...state, users: action.users };
//     case "SET_PARAMS":
//       return { ...state, params: { ...state.params, ...action.payload } };
//     default:
//       return state;
//   }
// };
//
// // Store
// const rootReducer = combineReducers({ app: appReducer });
//
// const store = createStore(rootReducer, applyMiddleware(thunk));
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// const setUsersAC = (users: UserType[]) => ({ type: "SET_USERS", users } as const);
// const setParamsAC = (payload: ParamsType) => ({ type: "SET_PARAMS", payload } as const);
// type ActionsType = ReturnType<typeof setUsersAC> | ReturnType<typeof setParamsAC>;
//
// // Thunk
// const getUsersTC = (): AppThunk => (dispatch, getState) => {
//   const params = getState().app.params;
//   api.getUsers(params.sortBy ? params : undefined).then((res) => dispatch(setUsersAC(res.data.items)));
// };
//
// export const Users = () => {
//   const users = useAppSelector((state) => state.app.users);
//   const sortBy = useAppSelector((state) => state.app.params.sortBy);
//   const sortDirection = useAppSelector((state) => state.app.params.sortDirection);
//   console.log(users, sortBy, sortDirection);
//
//   const dispatch = useAppDispatch();
//
//   // ‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó
//
//   useEffect(() => dispatch(getUsersTC()), [sortBy, sortDirection]);
//
//   const sortHandler = (name: string) => {
//     const direction = sortDirection === "asc" ? "desc" : "asc";
//     dispatch(setParamsAC({ sortBy: name, sortDirection: direction }));
//   };
//
//   return (
//     <div>
//       <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//       <table style={table}>
//         <thead>
//           <tr>
//             <th style={th} onClick={() => sortHandler("name")}>
//               Name
//             </th>
//             <th style={th} onClick={() => sortHandler("age")}>
//               Age
//             </th>
//           </tr>
//         </thead>
//         <tbody>
//           {users.map((u) => {
//             return (
//               <tr key={u.id}>
//                 <td style={td}>{u.name}</td>
//                 <td style={td}>{u.age}</td>
//               </tr>
//             );
//           })}
//         </tbody>
//       </table>
//     </div>
//   );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//   <Provider store={store}>
//     <Users />
//   </Provider>
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –ù–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã:
// 1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å
// 2) –ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ –≤–æ–∑—Ä–∞—Å—Ç—É
// 3) –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω–æ –∏ —Ç–æ–∂–µ –ø–æ–ª–µ 2 —Ä–∞–∑–∞)
// –æ—Ç–≤–µ—Ç:   useEffect(() => dispatch(getUsersTC()), [sortBy, sortDirection]); –∏ –µ—â—ë –Ω–∞–¥–æ —á—Ç–æ –±—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—ã–ª–∏

// import ReactDOM from "react-dom/client";
// import React, { useState } from "react";
// import axios from "axios";
//
// export const Jpegs = () => {
//   const [file, setFile] = useState<any>();
//   const [formData, setFormData] = useState<any>();
//   console.log(formData);
//
//   const onChange = (e: any) => {
//     const maybeFile = e.target.files?.[0];
//     if (maybeFile) {
//       if (maybeFile.type === "image/jpeg") {
//         setFile(maybeFile);
//         const draftFormData = new FormData();
//         draftFormData.append("myFile", maybeFile, maybeFile.name);
//         setFormData(draftFormData);
//         return;
//       } else alert("not .jpg!");
//     }
//     setFormData("");
//     setFile("");
//   };
//   const onClick = () => {
//     axios
//       .post("https://neko-back.herokuapp.com/file", formData)
//       .then(() => {
//         alert("–í—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å üöÄ");
//       })
//       .catch(() => {
//         alert("üò• –ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...");
//       });
//   };
//
//   return (
//     <div>
//       <input type={"file"} onChange={onChange} />
//       <div>updated: {file && new Date(file?.lastModified).toLocaleDateString()}</div>
//       <div>size: {((file?.size || 0) / 1048576).toFixed(2) + "MB"}</div>
//
//       <button onClick={onClick} disabled={!file}>
//         send
//       </button>
//     </div>
//   );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(<Jpegs />);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞ backend.
// –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫—É.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏.
//
// –æ—Ç–≤–µ—Ç : formData

// import ReactDOM from "react-dom/client";
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from "redux";
// import thunk, { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import React, { useEffect, useState } from "react";
// import axios from "axios";
//
// type UserType = {
//   id: string;
//   name: string;
//   age: number;
// };
//
// type UsersResponseType = {
//   items: UserType[];
//   totalCount: number;
// };
//
// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.ru/api/" });
//
// const api = {
//   getUsers(search: string) {
//     return instance.get<UsersResponseType>(`users?name=${search}&pageSize=100`);
//   },
// };
//
// const initState = { users: [] as UserType[] };
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case "SET_USERS":
//       return { ...state, users: action.users };
//     default:
//       return state;
//   }
// };
//
// // Store
// const rootReducer = combineReducers({ app: appReducer });
//
// const store = createStore(rootReducer, applyMiddleware(thunk));
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// const setUsersAC = (users: UserType[]) => ({ type: "SET_USERS", users } as const);
// type ActionsType = ReturnType<typeof setUsersAC>;
//
// // Thunk
// const getFriends =
//   (name: string): AppThunk =>
//   (dispatch) => {
//     api.getUsers(name).then((res) => dispatch(setUsersAC(res.data.items)));
//   };
//
// export const Users = () => {
//   const users = useAppSelector((state) => state.app.users);
//   const dispatch = useAppDispatch();
//   const [name, setName] = useState("");
//   const [timerId, setTimerId] = useState(0);
//
//   useEffect(() => {
//     if (timerId) {
//       clearTimeout(timerId);
//     }
//
//     setTimerId(
//       +setTimeout(() => {
//         dispatch(getFriends(name));
//       }, 1500)
//     );
//   }, [name]);
//
//   return (
//     <div>
//       <input value={name} onChange={(e) => setName(e.target.value)} />
//       {users.map((u) => {
//         return (
//           <div key={u.id}>
//             <p>
//               <b>name</b>: {u.name}
//             </p>
//           </div>
//         );
//       })}
//     </div>
//   );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//   <Provider store={store}>
//     <Users />
//   </Provider>
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–∞ —ç–∫—Ä–∞–Ω–µ input, –∫—É–¥–∞ –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å–∏–º–≤–æ–ª—ã.
// –û—Ç–∫—Ä–æ–π—Ç–µ Network/ fetch/XHR –∏ –ø–æ—Ä–æ–±—É–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Å–∏–º–≤–æ–ª—ã
// –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–≤–æ–¥–∏—Ç–µ —É—Ö–æ–¥—è—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä -
// —ç—Ç–æ –ø–ª–æ—Ö–æ.
//
// ü™õ –ó–∞–¥–∞—á–∞: –ü–æ—á–∏–Ω–∏—Ç—å debounce
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å
// –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
//
// –æ—Ç–≤–µ—Ç: if (timerId) {
//       clearTimeout(timerId);
//     } –Ω–æ –æ–ø—è—Ç—å –∂–µ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç, —Ö–æ—Ç—è –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
// –ø–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ cleanUp useEffect

// import ReactDOM from "react-dom/client";
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from "redux";
// import thunk, { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import React, { FC, useEffect } from "react";
// import axios from "axios";
//
// // Styles
// const table: React.CSSProperties = {
//   borderCollapse: "collapse",
//   width: "100%",
//   tableLayout: "fixed",
// };
//
// const th: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
//   background: "lightgray",
//   cursor: "pointer",
// };
//
// const td: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
// };
//
// const thActive: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
//   background: "lightblue",
//   cursor: "pointer",
// };
//
// // Types
// type UserType = {
//   id: string;
//   name: string;
//   age: number;
// };
//
// type UsersResponseType = {
//   items: UserType[];
//   totalCount: number;
// };
//
// type ParamsType = {
//   sortBy: string | null;
//   sortDirection: "asc" | "desc" | null;
// };
//
// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.ru/api/" });
//
// const api = {
//   getUsers(params?: ParamsType) {
//     return instance.get<UsersResponseType>("users", { params });
//   },
// };
//
// // Reducer
// const initState = {
//   users: [] as UserType[],
//   activeColumn: null as string | null,
//   params: {
//     sortBy: "name",
//     sortDirection: "asc",
//   } as ParamsType,
// };
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case "SET_USERS":
//       return { ...state, users: action.users };
//     case "SET_PARAMS":
//       return { ...state, params: { ...state.params, ...action.payload } };
//     case "SET_ACTIVE_COLUMN":
//       return { ...state, activeColumn: action.value };
//     default:
//       return state;
//   }
// };
//
// // Store
// const rootReducer = combineReducers({ app: appReducer });
//
// const store = createStore(rootReducer, applyMiddleware(thunk));
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// const setUsersAC = (users: UserType[]) => ({ type: "SET_USERS", users } as const);
// const setParamsAC = (payload: ParamsType) => ({ type: "SET_PARAMS", payload } as const);
// const setActiveColumnAC = (value: string) => ({ type: "SET_ACTIVE_COLUMN", value } as const);
// type ActionsType =
//   | ReturnType<typeof setUsersAC>
//   | ReturnType<typeof setParamsAC>
//   | ReturnType<typeof setActiveColumnAC>;
//
// // Thunk
// const getUsersTC = (): AppThunk => (dispatch, getState) => {
//   const params = getState().app.params;
//   api.getUsers(params).then((res) => dispatch(setUsersAC(res.data.items)));
// };
//
// export const Users = () => {
//   const users = useAppSelector((state) => state.app.users);
//   const sortBy = useAppSelector((state) => state.app.params.sortBy);
//   const sortDirection = useAppSelector((state) => state.app.params.sortDirection);
//
//   const dispatch = useAppDispatch();
//
//   useEffect(() => {
//     dispatch(getUsersTC());
//   }, [sortBy, sortDirection]);
//
//   const sortHandler = (sortBy: string) => {
//     const direction = sortDirection === "asc" ? "desc" : "asc";
//     dispatch(setParamsAC({ sortBy, sortDirection: direction }));
//     dispatch(setActiveColumnAC(sortBy));
//   };
//
//   return (
//     <div>
//       <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//       <table style={table}>
//         <thead>
//           <tr>
//             <Th name={"name"} sortHandler={sortHandler} />
//             <Th name={"age"} sortHandler={sortHandler} />
//           </tr>
//         </thead>
//         <tbody>
//           {users.map((u) => {
//             return (
//               <tr key={u.id}>
//                 <td style={td}>{u.name}</td>
//                 <td style={td}>{u.age}</td>
//               </tr>
//             );
//           })}
//         </tbody>
//       </table>
//     </div>
//   );
// };
//
// type ThPropsType = {
//   name: string;
//   sortHandler: (name: string) => void;
// };
//
// const Th: FC<ThPropsType> = ({ name, sortHandler }) => {
//   const activeColumn = useAppSelector((state) => state.app.activeColumn);
//   const sortBy = useAppSelector((state) => state.app.params.sortBy);
//   const sortDirection = useAppSelector((state) => state.app.params.sortDirection);
//
//   const condition1 = "‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó";
//   const condition2 = "‚ùó‚ùó‚ùó YYY ‚ùó‚ùó‚ùó";
//   const condition3 = "‚ùó‚ùó‚ùó ZZZ ‚ùó‚ùó‚ùó";
//
//   return (
//     <th style={condition1 ? thActive : th} onClick={() => sortHandler(name)}>
//       {name}
//       {condition1 && condition2 && (condition3 ? <span> ‚¨Ü</span> : <span> ‚¨á</span>)}
//     </th>
//   );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//   <Provider store={store}>
//     <Users />
//   </Provider>
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
// –ü–æ–∫–ª–∏–∫–∞–π—Ç–µ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º age –∏ name –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ—Ä–Ω–æ,
// –Ω–æ –≤ —à–∞–ø–∫–µ –∫—Ä–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å—Ç—Ä–µ–ª–∫–∏ –∏ –Ω–µ –≤–∏–¥–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤–º–µ—Å—Ç–æ XXX YYY –∏ ZZZ, —á—Ç–æ–±—ã:
// 1) –°—Ç—Ä–µ–ª–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ
// 2) –®–∞–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏ –±—ã–ª–∞ –≥–æ–ª—É–±–∞—è, –∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Ä–∞—è
// ‚ùó –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: a === '1' b !== a c === state

// import axios from "axios";
// import React, { useEffect, useState } from "react";
// import ReactDOM from "react-dom/client";
//
// type UserType = {
//   id: string;
//   name: string;
//   age: number;
// };
//
// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.ru/api/" });
//
// const api = {
//   getUsers() {
//     return instance.get(`users?pageSize=${3}&pageNumber=${2}`);
//   },
// };
//
// // App
// export const App = () => {
//   const [users, setUsers] = useState<UserType[]>([]);
//
//   useEffect(() => {
//     api.getUsers().then((res) => {
//       setUsers(res.data.items);
//     });
//   }, []);
//
//   return (
//     <>
//       <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//       {users.map((u) => {
//         return (
//           <div style={{ display: "flex", gap: "10px" }} key={u.id}>
//             <p>
//               <b>name</b>: {u.name}
//             </p>
//             <p>
//               <b>age</b>: {u.age}
//             </p>
//           </div>
//         );
//       })}
//     </>
//   );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(<App />);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ –∏–∑ 3-—á–µ–ª–æ–≤–µ–∫.
// –ü–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ, –∞ –∏–∑-–∑–∞ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤—Å–µ —Ç–µ—Ö –∂–µ —é–∑–µ—Ä–æ–≤),
// –ø—Ä–∏ —ç—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –≤–æ–ø—Ä–æ—Å–∞ –∏ –∞–º–ø–µ—Ä—Å–∞–Ω–¥–∞.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥—É (–ø–µ—Ä–µ–Ω–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã)
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return instance.get('users=pageSize=3=pageNumber=2')

// import React from "react";
// import ReactDOM from "react-dom/client";
//
// export const App = () => {
//   return (
//     <div>
//       <h2>–ö–∞–∫–æ–µ –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –≤–µ—Ä–Ω–æ ?</h2>
//       <ul>
//         <li>
//           1 - –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ñ–∞–π–ª –±—ã–ª –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é git init –∏ –∑–∞–∫–æ–º–º–∏—á–µ–Ω, git –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
//           –≤—Å–µ —Å–ª–µ–¥—É—é—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω—ë–º.
//         </li>
//         <li>
//           2 - –í–µ—Ç–∫–∏ –≤ Git –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –∫–æ–º–º–∏—Ç. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫—É—é-—Ç–æ —Ñ–∏—á—É –∏–ª–∏
//           –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ (–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ —Å–µ—Ä—å–µ–∑–Ω—ã–π), –º—ã —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –≤–µ—Ç–∫—É. –û–Ω–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ
//           –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ö–æ—Ç–∏–º –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
//         </li>
//         <li>
//           3 - –ö–æ–º–∞–Ω–¥–∞ git add —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Git. –° –µ–µ –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
//           –ø—Ä–æ–µ–∫—Ç –±–µ–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Git –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
//         </li>
//         <li>4 - –ù–∏ –æ–¥–Ω–æ –∏–∑ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –Ω–µ –≤–µ—Ä–Ω–æ</li>
//       </ul>
//     </div>
//   );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(<App />);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ö–∞–∫–æ–µ –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –≤–µ—Ä–Ω–æ ?
// –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ (–æ—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).
// ‚ùó –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –≤–µ—Ä–Ω—ã–π, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏.
// –ï—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç (1),
// –∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ —É–∫–∞–∑–∞—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1 –∏ 2), —Ç–æ –æ—Ç–≤–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
// 0—Ç–≤–µ—Ç: 2
